/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package book;

import java.math.BigDecimal;
import java.time.LocalDate;

import dao.*;
import exception.BookNotFoundException;
import exception.InvalidBookException;
import model.Book;
import service.*;

public class App {
	public static void main(String[] args) {
		BookService bookService = new BookServiceImpl(new BookDAOImpl());

        // Crear libros con fechas específicas
        try {
            bookService.createBook(new Book(null, "978-3-16-148410-0", "El Señor de los Anillos: La Comunidad del Anillo",
                    "J.R.R. Tolkien", "Fantasía", true, LocalDate.of(2001, 7, 29), BigDecimal.valueOf(29.99)));
            bookService.createBook(new Book(null, "978-84-349-0502-0", "Cien años de soledad", "Gabriel García Márquez",
                    "Realismo mágico", false, LocalDate.of(1967, 6, 30), BigDecimal.valueOf(39.99)));
            bookService.createBook(new Book(null, "978-0-452-28423-4", "1984", "George Orwell", "Distopía", true,
                    LocalDate.of(1949, 6, 8), BigDecimal.valueOf(19.99)));
            bookService.createBook(new Book(null, "978-0-19-953556-9", "Orgullo y prejuicio", "Jane Austen", "Clásico",
                    true, LocalDate.of(1813, 1, 28), BigDecimal.valueOf(12.99)));
            bookService.createBook(new Book(null, "978-3-16-148410-1", "El alquimista", "Paulo Coelho", "Ficción", true,
                    LocalDate.of(1988, 5, 1), BigDecimal.valueOf(15.99)));
        } catch (InvalidBookException e) {
            System.out.println("Error al crear libro: " + e.getMessage());
        }

        // Obtener y mostrar un libro
        try {
            Book book = bookService.getBookById(1L);
            System.out.println("\nLibro encontrado:\n" + book.toString());
        } catch (InvalidBookException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        }

        // Intentar obtener un libro con un ID inválido
        try {
            bookService.getBookById(null); // Esto ahora lanzará una InvalidBookException
        } catch (InvalidBookException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        }

        // Actualizar información de un libro
        try {
            Book updatedBook = new Book(null, "978-3-16-148410-0", "El Señor de los Anillos: La Comunidad del Anillo (Edición Especial)", "J.R.R. Tolkien", "Fantasía", true, LocalDate.of(2001, 7, 29), BigDecimal.valueOf(34.99));
            Book book = bookService.updateBook(1L, updatedBook);
            System.out.println("\nLibro actualizado:\n" + book.toString());
        } catch (InvalidBookException e) {
            System.out.println("Error al actualizar libro: " + e.getMessage());
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        }

        // Intentar actualizar un libro que no existe
        try {
            bookService.updateBook(999L, new Book(null, "978-0-00-000000-0", "Libro Inexistente", "Autor", "Género", true, LocalDate.of(2020, 1, 1), BigDecimal.valueOf(10.99)));
        } catch (InvalidBookException e) {
            System.out.println("Error al actualizar libro: " + e.getMessage());
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        }

        // Filtrar libros por precio
        try {
            System.out.println("\nLibros en rango de precio 20 a 30:");
            bookService.findBooksByPriceRange(BigDecimal.valueOf(20), BigDecimal.valueOf(30))
                    .forEach(book -> System.out.println(book.getTitle()));
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        } catch (IllegalArgumentException e) {
            System.out.println("Error al filtrar libros: " + e.getMessage());
        }

        // Buscar libros por título (búsqueda parcial, case-insensitive)
        try {
            System.out.println("\nLibros que contienen 'El':");
            bookService.findBooksByTitle("El").forEach(book -> System.out.println(book.getTitle()));
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        } catch (IllegalArgumentException e) {
            System.out.println("Error al buscar libros: " + e.getMessage());
        }

        // Obtener libros de un autor específico
        try {
            System.out.println("\nLibros de J.R.R. Tolkien:");
            bookService.findBooksByAuthor("J.R.R. Tolkien").forEach(book -> System.out.println(book.getTitle()));
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        } catch (IllegalArgumentException e) {
            System.out.println("Error al buscar libros: " + e.getMessage());
        }


        // Obtener lista de libros ordenada por fecha de publicación
        try {
            System.out.println("\nLibros ordenados por fecha de publicación:");
            bookService.getAllBooksSortedByPublicationDate()
                    .forEach(book -> System.out.println(book.getTitle() + " - " + book.getPublicationDate()));
        } catch (IllegalStateException e) {
            System.out.println("Error al obtener libros: " + e.getMessage());
        }

        // Eliminar un libro
        try {
            bookService.deleteBook(2L); // Suponiendo que deseas eliminar el libro con ID 2
            System.out.println("\nLibro eliminado con éxito.");
        } catch (InvalidBookException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        }

        // Intentar eliminar un libro con un ID inválido
        try {
            bookService.deleteBook(null); // Esto debería lanzar una InvalidBookException
        } catch (InvalidBookException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (BookNotFoundException e) {
            System.out.println(e.toString());
        }

	}

}
